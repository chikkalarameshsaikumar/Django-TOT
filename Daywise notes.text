Day-1[30-11-2020]:
==================
	Good Afternoon to All.
	
	OOPS:
	====
	oops => Object Oriented Programming
	
	- Better Security
	- Large program can be divided into smaller parts
	- Hiding of data[Packages]
	- in python programming every variable is considerd to be as a object
	- code reuseability
	
	Properties:
	==========
	- class
	- object
	- methods
	- Inheritance
	- Polymorphism
	- Data Abstraction
	- Encapsulation

	Class:[Design]
	==============
	- It is a blue print of an object
	- Collection of member variables and Methods
	- Syntax:
		class class_name:
			'''documentation'''
			variables
			methods
		
		Classnames:
		----------
		-> Starts with Capital letter and _
		-> Shouldn't starts with numbers
		-> Shouldn't include any spaces between class name
		-> Shouldn't include special characters except "_"
	
		
		=> a = 10
		=> print(type(a))
		
	Functions Vs Methods:
	====================
	-> Function => To perform a specific Task.
	-> Method => Similar to Function but we can inlcude those function inside of a class
	
	Object:[Completed product]
	=========
	- Instance of a class
	- Real Time entity
	- Syntax:
		object_name = Class_name
	
	Constructor:
	============
	-> Syntax:
	   def __init__(self):
			return ?
	
	-> 2 types:
		- Default
		- Parameterised
	
	Packages and Modules by using OOP's:
	
	Inheritance:[Relationship]
	==========================
	- Acquring the properties from parent[Base Class] to child[Derived Class]
	- Types of Inheritance:
		- Single -> 1 => Parent,1 => child
		- Multilevel -> 2 => Parents,1 => Child[parent-1=>parent2]
		- Multiple => 2 => Parents,1=> child[2 parents,Parent-Parent => x] 
		- Hybrid => All combination of Inheritances
		- Heirarichael => 1 Parent,2 => Childs
	
	Mobile:
	=======
	Redmi => Blueprint => plan => Design
	
	completed product => Object
	
Day-2[01-12-2020]:
==================
	Good Afternoon to All...
	
	Django:
	=======
	- Web Application framework [Python]
	- High Security[Admin,user => own flow]
	- Large Applications to create easily within a given time period
	- MVC => MVT
	
	Python:
	=======
	- cmd => python -V
	
	Editor:
	=======
	- Sublime Editor[Tree structure]
	
	Django Installation:
	====================
	- pip command
	- pip install django => Latest version of django
				or
		- pip install django==3.0 
	- To check whether the django is installed or not?
		- python
		-> >>> import django
		   >>> django.__version__
	
	- django-admin --version
	

	Project Creation:
	=================
	- First enter into a path where we need to create a project
	- cmd
		- django-admin startproject "projectname"
		ex:
		  django-admin startproject DjangoTOT
	
	- DjangoTOT
		- DjangoTOT [Admin App]
		- manage.py [Services will starts from here]
	
	- DjangoTOT:
		- init -> It should be considered to be as a python file
		- asgi -> Asynchronous Gateway Interface
		- settings -> html,css,js,images, 
		- wsgi -> WebSocket Gateway Interface
		- urls -> checking

	Running of a project:
	=====================
	- first we need to enter into a path where manage.py is existing
	- cmd
		- python manage.py 
			or
		- manage.py	
		
	- python manage.py runserver
	- manage.py runserver
	
	-> localhost => 127.0.0.1
	
	http://127.0.0.1:8000 
	
	localhost:8000
	
	Ports are blocked:
	------------------
	- python manage.py runserver 1234
	- manage.py runserver 1234
	
	localhost:1234 
	
Day-3[02-12-2020]:
==================
	Good Afternoon to All..
	
	UserApp Creation:
	=================
	- manage.py
		- manage.py startapp "appname"
		ex:
			- manage.py startapp djtot

	Userapp Files:
	==============
	- init -> It should be considered to be as a python
	- admin -> tables to be viewed in an admin page 
	- apps -> configurations
	- models -> Database -> table,fields
	- views -> function[work], methods
	- tests -> unit testing
	
	MVC:
	===
	M -> Model => [Database]
	V -> View => html,css,js
	C -> Controller => .py,.java,.net[Controller]
	
	
	MVT:
	===
	M -> Model => [Database]
	V -> View[Controller] => url -> views -> function[Logics] 
	T -> Template => html,css,js[DTL => Django Template Language]
	
	
	
	Settings.py:
	============
	-> Userapp Configured
	-> url => Create
		
		syntax:
			path('urlname/',modulename.functionname,name="userdefinedname")
	
	url => view => HttpResponse
				=> [Html tags]
				=> [CSS]
				
	->Dynamic Url Mapping:
		localhost:8000/rcd/rajesh
		
		Hi Welcome Rajesh
	
	localhost:8000/tb/2/
	
	2 x 01 = 02
	2 x 02 = 04
	2 x 03 = 06
	2 x 04 = 08
	2 x 05 = 10
	
03-12-2020:
===========

	Good Afternoon to All..
	
	url => 2 parameters(name,age) => views => template[.html]
	
	Templates are configured or not?
	
	templates[only .html files]
		- html
	
	r = {"n":name,"a":age}
	render(request,'path of .html[templates]',r)
	render(request,'path of .html',{"na":name,"ag":age})
	
	templates:
	==========
		djtot
			-> templates
				-> index.html
		
		djbt
			-> templates
				-> index.html
				
	templates:
		-> djtot
			-> index.html
		-> djbt
			-> index.html
	Static
		css
		js
		images
		audio/video
	
	Django Template Language:[DTL]
	==============================
	
	url -> views -> py -> .html
	ajax,js
	registration -> json [dictionary] -> serverside -> database
	
	Variable:
	========
	{{}}


04-12-2020:
===========
	Good Afternoon to All...
	
	templates -> tags -> styling
	
	url => views => html
	
	CSS => Cascading Style sheet -> color,alignments,size 
	----
	Inline -> inside of tags by using style attribute 
	Internal -> <style>
				tagname
				{
					property:value;
				}
				</style>
				
	selectors => tagname, class, id 
	External -> .css => all style property and value can be stored in other .css
	
	Static:
	-------
	settings.py:
	
	static = '/static/'
	
	{% load static %}
	
	css -> href="{% static 'css/sample.css' %}"
	
	js
	==
	
	<script>
	//
	</script>
	
	css
	jquery
	js
	
	Task:
	=====
	
	Create a login Page internal Styling
	
	Create Registration page by using External Styling
	
05-12-2020:
===========
	Good Afternoon to All..
	
	alert("Hi Welcome")
	
	
	placeholder => data to be viewed to user
	
	
	Task:
	
	Js:
	
	Enter 2 values by using form
	
	Output should be displayed in same form with all arithmetic operations include in it.
	
	you can use either alert or any tag to display the output

07-12-2020:
===========
	Good Afternoon to All...
	
	CRUD 
	Login,logout
	mail
	message
	Relationship

Javascript:
-----------
	task explained and image by using static concept

Bootstrap:
==========
	- responsiveness for a page
	- beautification of website
	
	- Online -> [links -> internet]
		-> Home.html
	- Offline
	
	
08-12-2020:
===========
	Good Afternoon to All...
	
	site, .html => css,js
	css -> tag,id,class
	
	Boostrap:
	=========
	included css,js
	class = style
	form,input,button,radio button,dropdown -> class 
	
	css
	jquery -> event[inbuilt]
	js -> DOM 
	
	id => exact
	class => all
	class, id => changes
	
	styling:
	-------
	h4
	{
		margin-left:20px;
		margin-right:20px;
		background-color:green;
	}
	
	<h4 class="mx-20 bg-green"></h4>
	
	mx-1 => 4px
	padding => point => 1 - 5
	x => left,right
	y => top,bottom
	
	p - 3
	m - 3
	pl-2 , pr-3, pt-2, pb-1
	ml-2 , mr-3, mt-2, mb-1
	
	Grid:
	=====
	columns => 12
	col-md-6
		col-md-6
	md,lg,sm,xm
	
	col-md-5
	col => 7
	12 / 3 => 4
	
	primary,success,danger,warning,light,info,secondary,dark
	
	shadow -> large, medium, small
	
	labels => id
	input => for
	
	Registration Page:
	==================
	input => textbox,password,dropdown -> bootstrap

09-12-2020:
===========
	Good Afternoon to All....
	
	url -> views -> html -> views -> html
	
	DTL => Django Template Language:
	================================
	.py => html
	
	variable => {{}}
	conditional statement:
	=====================
	-> if
	{% if condition %}
		//stmnt
	{% endif %}
	
	-> if-else
	
	{% if condition %}
		//stmnt-1
	{% else %}
		//stmnt-2
	{% endif %}
	
	-> elseif
	
	{% if condition %}
		//stmnt-1
	{% elif condition %}
		//stmnt-2
		|    |      |
	{% else %}
		//stmnt-n
	{% endif %}
	
	Loop:
	=====
	- for
	
	{% for iterationvariablename in iterator %}
		//stmnt
		{{iterationvariablename}}
	{% endfor %}
	
	url,static,img => {% url 'urlname' %}
	{% load static %}
	<img src="{% static 'images/logo.png' %}">
	
	{% extends '' %}
	{% include "" %}
	
	Bootstrap -> Offline:
	=====================
		-> Bootstrap
		
	form:
	=====
	method="get"
	methods -> GET,POST
	
	GET: -> GET[default]
	passing of data can be viewed in url of a browser
	characters limit
	database => get
	
	POST: -> secure data [sensitive info]
	characters has no limit
	form -> data -> save
	
	form submit -> form tag {% csrf_token %}
	
	Task:
	========
	Login form -> username and password -> validate -> True
		-> hi welcome user ?
		-> Invalid Username
		
	Registration -> Details -> .html => viewed 
	
10-12-2020:
===========
11-12-2020:
===========
12-12-2020:
===========
14-12-2020:
===========

15-12-2020:
===========
## Good Afternoon All:

### Dynamic Html Form Genearation:
	-------------------------------
	- for generatring dynamic html form we
	 have 2 dif ways
	 -- by using forms.py
		- we need to create a file with name of forms.py
		 inside app.
		- inside forms.py we have to import forms.py which is 
			belongs to django.
	 -- by using models.py(based on tables field)
	
	-- Task1:you have to apply bootstrap for that html form
	-- Task2: after submitting data you need to display it 
	in another .html file

16-12-2020:
===========
## Good Afternoon All:
	- generating html form using models.py
	

17-12-2020:
===========
## Good Afternoon All:

CRUD:
	-- to transfer data from html page to controller file we nhave 2 diff methods
		-- Get: for better security we dont prefor get method
			-- it will shows entire data at url part
		-- Post: post will provide better security
	-- using basic procedure
		-- in basic proceduer we need to write everything
	-- crud with forms.py

	-- generic

	task:
	-- design a home page with name of home.html
		-- in that create 2 options with register and disply in  nave bar
		-- when u click on register navigate page from home. page to register page
		-- in same way u have to navigate request from home to disply page


18-12-2020:
==========
	Good Afternoon to All..
	task:
	-- design a home page with name of home.html
		-- in that create 2 options with register and disply in  nave bar
		-- when u click on register navigate page from home. page to register page
		-- in same way u have to navigate request from home to disply page
	
	DTL:
	====
	
	extends
	include
	
19-12-2020:
===========
	Good Afternoon to All...
	
	what is the difference between forms.Form and forms.ModelForm? -> Anil
	
	forms.Form => forms -> Form -> basic
	
	forms.ModelForm => existing, user defined Model
		=> ModelForm
	
	forms:
	======
		CRUD
	
	Model:
	======
		C,R,U,D
	
	DTL:
	====
		{% extends %}
		{% include %}
		{% block title %} {% endblock %}
		{% block content %}{% endblock %}
	
	Xampp => .exe
	pip install mysqlclient 
	
21-12-2020:
===========
	Good Afternoon to All......
	
	Model => forms -> widget => html
	
	Existing model
	
	
	Xampp => Apache
	
	Mysql => Database,postgres,nosql,mongo db
	
	configurations:[settings.py]
	============================
	
	DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.mysql',
        'NAME': 'database_name',
        'USER': 'root',
        'PASSWORD': '',
        'HOST': '',
        'PORT': '',
		}
	}
	
	xampp => installations [apache => 80]
	mysql => [3306]
	
	forms => mysql_client => Mysql 
	
	registration =>
	
	url => views => forms => [import models]
						widget => 
			views <=
				  => html => views => models
	
	Messages:[Notification]:
	========================
	
	views.py:
	=========
	from django.contrib import messages
	
	
	success
	info
	warning
	debug
	
	message.success(request,"something message")
	
	html:
	=====
	{% if messages %}
	{% for k in messages %}
	{{k}}
	{% endfor %}
	{% endif %}
	
	

	
	
